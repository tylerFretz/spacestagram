{"version":3,"file":"static/js/758.cff6ebfb.chunk.js","mappings":"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","sources":["hooks/useLockedBody.ts","components/PostCard/PostActions.tsx","hooks/useEventListener.ts","hooks/useElementSize.ts","components/PostCard/ToggleableText.tsx","components/PostCard/ExpandableImage.tsx","components/PostCard/index.tsx"],"sourcesContent":["import { useEffect, useLayoutEffect, useState } from 'react'\r\n\r\ntype ReturnType = [boolean, (locked: boolean) => void]\r\n\r\nfunction useLockedBody(initialLocked = false): ReturnType {\r\n  const [locked, setLocked] = useState(initialLocked)\r\n\r\n  // Do the side effect before render\r\n  useLayoutEffect(() => {\r\n    if (!locked) {\r\n      return\r\n    }\r\n\r\n    // Save initial body style\r\n    const originalOverflow = document.body.style.overflow\r\n    const originalPaddingRight = document.body.style.paddingRight\r\n\r\n    // Lock body scroll\r\n    document.body.style.overflow = 'hidden'\r\n\r\n    // Get the scrollBar width\r\n    const root = document.getElementById('root') // or root\r\n    const scrollBarWidth = root ? root.offsetWidth - root.scrollWidth : 0\r\n\r\n    // Avoid width reflow\r\n    if (scrollBarWidth) {\r\n      document.body.style.paddingRight = `${scrollBarWidth}px`\r\n    }\r\n\r\n    return () => {\r\n      document.body.style.overflow = originalOverflow\r\n\r\n      if (scrollBarWidth) {\r\n        document.body.style.paddingRight = originalPaddingRight\r\n      }\r\n    }\r\n  }, [locked])\r\n\r\n  // Update state if initialValue changes\r\n  useEffect(() => {\r\n    if (locked !== initialLocked) {\r\n      setLocked(initialLocked)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [initialLocked])\r\n\r\n  return [locked, setLocked]\r\n}\r\n\r\nexport default useLockedBody\r\n","import React from 'react';\r\nimport { IconButton, Checkbox } from '@mui/material';\r\nimport { Favorite, FavoriteBorder, Fullscreen } from '@mui/icons-material';\r\nimport { useGetPostVote, useVote } from '../../hooks/usePosts';\r\n\r\ninterface Props {\r\n\tdate: string,\r\n\ttoggleFullscreen: (event: React.MouseEvent<HTMLElement>) => void,\r\n\tmediaType: string\r\n}\r\n\r\nconst PostActions = ({ date, toggleFullscreen, mediaType }: Props) => {\r\n\tconst { mutate } = useVote(date);\r\n\tconst voteCount = useGetPostVote(date);\r\n\r\n\r\n\tif (!voteCount.data) return null;\r\n\r\n\tconst count = voteCount.data.votes;\r\n\r\n\treturn (\r\n\t\t<div style={{ display: 'flex', alignItems: 'center' }}>\r\n\t\t\t<div style={{ display: 'flex', margin: '0 1rem' }}>\r\n\t\t\t\t<Checkbox\r\n\t\t\t\t\ticon={<FavoriteBorder />}\r\n\t\t\t\t\tcheckedIcon={<Favorite color='error' />}\r\n\t\t\t\t\tonChange={() => mutate()}\r\n\t\t\t\t\tinputProps={{ 'aria-label': 'Like checkbox' }}\r\n\t\t\t\t\tchecked={voteCount.data.userLiked}\r\n\t\t\t\t\tstyle={{ padding: '0 5%'}}\r\n\t\t\t\t/>\r\n\t\t\t\t<p aria-label='Vote count' style={{ margin: '0 5%' }}>{count}</p>\r\n\t\t\t</div>\r\n\t\t\t{mediaType === 'image' && (\r\n\t\t\t\t<IconButton onClick={toggleFullscreen} aria-label='Toggle Fullscreen' style={{ padding: '0 5%' }}>\r\n\t\t\t\t\t<Fullscreen />\r\n\t\t\t\t</IconButton>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default PostActions;","import { RefObject, useEffect, useRef } from 'react'\r\n\r\nfunction useEventListener<K extends keyof WindowEventMap>(\r\n  eventName: K,\r\n  handler: (event: WindowEventMap[K]) => void,\r\n): void\r\nfunction useEventListener<\r\n  K extends keyof HTMLElementEventMap,\r\n  T extends HTMLElement = HTMLDivElement,\r\n>(\r\n  eventName: K,\r\n  handler: (event: HTMLElementEventMap[K]) => void,\r\n  element: RefObject<T>,\r\n): void\r\n\r\nfunction useEventListener<\r\n  KW extends keyof WindowEventMap,\r\n  KH extends keyof HTMLElementEventMap,\r\n  T extends HTMLElement | void = void,\r\n>(\r\n  eventName: KW | KH,\r\n  handler: (\r\n    event: WindowEventMap[KW] | HTMLElementEventMap[KH] | Event,\r\n  ) => void,\r\n  element?: RefObject<T>,\r\n) {\r\n  // Create a ref that stores handler\r\n  const savedHandler = useRef<typeof handler>()\r\n\r\n  useEffect(() => {\r\n    // Define the listening target\r\n    const targetElement: T | Window = element?.current || window\r\n    if (!(targetElement && targetElement.addEventListener)) {\r\n      return\r\n    }\r\n\r\n    // Update saved handler if necessary\r\n    if (savedHandler.current !== handler) {\r\n      savedHandler.current = handler\r\n    }\r\n\r\n    // Create event listener that calls handler function stored in ref\r\n    const eventListener: typeof handler = event => {\r\n      // eslint-disable-next-line no-extra-boolean-cast\r\n      if (!!savedHandler?.current) {\r\n        savedHandler.current(event)\r\n      }\r\n    }\r\n\r\n    targetElement.addEventListener(eventName, eventListener)\r\n\r\n    // Remove event listener on cleanup\r\n    return () => {\r\n      targetElement.removeEventListener(eventName, eventListener)\r\n    }\r\n  }, [eventName, element, handler])\r\n}\r\n\r\nexport default useEventListener;\r\n","import { useCallback, useLayoutEffect, useState } from 'react'\r\n\r\nimport useEventListener from './useEventListener';\r\n\r\ninterface Size {\r\n  width: number\r\n  height: number\r\n}\r\n\r\nfunction useElementSize<T extends HTMLElement = HTMLDivElement>(): [\r\n  (node: T | null) => void,\r\n  Size,\r\n] {\r\n  // Mutable values like 'ref.current' aren't valid dependencies\r\n  // because mutating them doesn't re-render the component.\r\n  // Instead, we use a state as a ref to be reactive.\r\n  const [ref, setRef] = useState<T | null>(null)\r\n  const [size, setSize] = useState<Size>({\r\n    width: 0,\r\n    height: 0,\r\n  })\r\n\r\n  // Prevent too many rendering using useCallback\r\n  const handleSize = useCallback(() => {\r\n    setSize({\r\n      width: ref?.offsetWidth || 0,\r\n      height: ref?.offsetHeight || 0,\r\n    })\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [ref?.offsetHeight, ref?.offsetWidth])\r\n\r\n  useEventListener('resize', handleSize)\r\n\r\n  useLayoutEffect(() => {\r\n    handleSize()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [ref?.offsetHeight, ref?.offsetWidth])\r\n\r\n  return [setRef, size]\r\n}\r\n\r\nexport default useElementSize;\r\n","import React, { useState } from 'react';\r\nimport { Typography, Theme } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { useSpring, config, animated } from 'react-spring';\r\nimport useElementSize from '../../hooks/useElementSize';\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n\ttoggleButton: {\r\n\t\tborder: 'none',\r\n\t\tbackgroundColor: 'inherit',\r\n\t\tcursor: 'pointer',\r\n\t\tdisplay: 'inline-block',\r\n\t\tcolor: theme.palette.mode === 'dark' ? '#AAA' : '#000',\r\n\t\tpadding: 0,\r\n\t\tfontSize: '1.1rem',\r\n\t\t'&:hover': {\r\n\t\t\tcolor: theme.palette.success.light\r\n\t\t},\r\n\t}\r\n}));\r\n\r\ninterface Props  {\r\n\ttext: string\r\n}\r\n\r\nconst ToggleableText = ({ text }: Props) => {\r\n\tconst [hidden, setHidden] = useState(false);\r\n\tconst [textRef, { height }] = useElementSize();\r\n\tconst classes = useStyles();\r\n\r\n\tconst slideInStyles = useSpring({\r\n\t\tconfig: { ...config.slow },\r\n\t\tfrom: { opacity: 0, height: 0 },\r\n\t\tto: {\r\n\t\t\topacity: hidden ? 1 : 0,\r\n\t\t\theight: hidden ? height : 0\r\n\t\t}\r\n\t});\r\n\r\n\tconst toggleHidden = (event: React.MouseEvent<HTMLElement>) => {\r\n\t\tevent.preventDefault();\r\n\t\tsetHidden(prev => !prev);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<animated.div style={{ ...slideInStyles, overflow: 'hidden' }}>\r\n\t\t\t\t<Typography variant='body2' component='p' ref={textRef} style={{ textIndent: '30px', textAlign: 'justify' }}>\r\n\t\t\t\t\t{text}\r\n\t\t\t\t</Typography>\r\n\t\t\t</animated.div>\r\n\t\t\t<button onClick={toggleHidden} className={classes.toggleButton} aria-label='toggle description'>\r\n\t\t\t\t{hidden ? 'Hide description' : 'Read description'}\r\n\t\t\t\t<ArrowDropDownIcon \r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\ttransform: hidden ? '' : 'rotate(180deg)',\r\n\t\t\t\t\t\ttransition: 'transform 900ms ease'\r\n\t\t\t\t\t}} \r\n\t\t\t\t/>\r\n\t\t\t</button>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default ToggleableText;","import React from 'react';\r\nimport { CardMedia, Typography, IconButton } from '@mui/material';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nconst useStyles = makeStyles({\r\n\timageContainer: {\r\n\t\tposition: 'relative',\r\n\t\tpaddingBottom: '56.25%', // 16:9 ratio\r\n\t\theight: 0,\r\n\t\toverflow: 'hidden',\r\n\t\ttextAlign: 'center',\r\n\t\tmarginBottom: '1rem'\r\n\t},\r\n\timage: {\r\n\t\tposition: 'absolute',\r\n\t\ttop: 0,\r\n\t\tleft: 0,\r\n\t\twidth: '100%',\r\n\t\theight: '100%',\r\n\t\tborder: 'none'\r\n\t},\r\n\timageModal: {\r\n\t\twidth: '100%',\r\n\t\tmaxHeight: '95vh',\r\n\t\tmaxWidth: '95vw'\r\n\t},\r\n\toverlay: {\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t\talignItems: 'center',\r\n\t\tposition: 'fixed',\r\n\t\twidth: '100vw',\r\n\t\theight: '100vh',\r\n\t\ttop: 0,\r\n\t\tleft: 0,\r\n\t\tright: 0,\r\n\t\tbottom: 0,\r\n\t\tbackgroundColor: 'rgba(0, 0, 5, 0.95)',\r\n\t\tzIndex: 99,\r\n\t\tcursor: 'pointer',\r\n\t\tpaddingTop: '1%',\r\n\t\toverflow: 'scroll'\r\n\t},\r\n\toverlayButton: {\r\n\t\tposition: 'absolute',\r\n\t\tright: 0,\r\n\t\tmargin: '1rem 1rem'\r\n\t},\r\n});\r\n\r\ninterface Props {\r\n\turl?: string\r\n\ttitle: string\r\n\tmediaType: string\r\n\ttoggleFullscreen: (event: React.MouseEvent<HTMLElement>) => void\r\n\tisExpanded: boolean\r\n\tdescription: string\r\n\tcopyright?: string\r\n\tdate: string\r\n}\r\n\r\nconst ExpandableImage = ({ url, title, mediaType, toggleFullscreen, isExpanded, description, copyright, date }: Props) => {\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t{/* wrapping image in container to prevent layout shifts using the padding-bottom hack  */}\r\n\t\t\t<div className={classes.imageContainer}>\r\n\t\t\t\t<CardMedia\r\n\t\t\t\t\tclassName={classes.image}\r\n\t\t\t\t\t// media type may be a video, in which case iframe is needed\r\n\t\t\t\t\tcomponent={mediaType === 'image' ? 'img' : 'iframe'}\r\n\t\t\t\t\talt={title}\r\n\t\t\t\t\tsrc={url}\r\n\t\t\t\t\ttitle={mediaType === 'image' ? `Image of ${title}` : `Video of ${title}`}\r\n\t\t\t\t\tallowFullScreen\r\n\t\t\t\t\tloading='lazy'\r\n\t\t\t\t/>\r\n\t\t\t\t{isExpanded && (\r\n\t\t\t\t\t<div className={classes.overlay}>\r\n\t\t\t\t\t\t\t<IconButton onClick={toggleFullscreen} component='span' role='button' style={{ alignSelf: 'flex-end', opacity: .8, color: '#FFF' }}>\r\n\t\t\t\t\t\t\t\t<CloseIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t<div className={classes.imageContainer}>\r\n\t\t\t\t\t\t\t<img src={url} alt={title} className={classes.imageModal}></img>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div style={{ padding: '1% 2%' }}>\r\n\t\t\t\t\t\t\t<Typography variant='subtitle1' style={{ textIndent: '30px', textAlign: 'justify', color: '#FFF', fontSize: '.85rem' }}>\r\n\t\t\t\t\t\t\t\t{description}\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<p style={{ color: '#FFF', fontSize: '.75rem', paddingTop: '1.5 rem' }}>\r\n\t\t\t\t\t\t\t\tPhoto taken {date}\r\n\t\t\t\t\t\t\t\t{copyright && (\r\n\t\t\t\t\t\t\t\t\t<span> by {copyright}</span>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default ExpandableImage;","import React, { useState } from 'react';\r\nimport { Card, CardContent, Theme, Typography } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { usePostByDate } from '../../hooks/usePosts';\r\nimport useLockedBody from '../../hooks/useLockedBody';\r\nimport PostActions from './PostActions';\r\nimport ToggleableText from './ToggleableText';\r\nimport ExpandableImage from './ExpandableImage';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n\tpostCard: {\r\n\t\tmaxWidth: '60vw',\r\n\t\t[theme.breakpoints.down('md')]: {\r\n\t\t\tmaxWidth: '95vw'\r\n\t\t}\r\n\t},\r\n\tcontentTopContainer: {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'space-between'\r\n\t}\r\n}));\r\n\r\n\r\ninterface Props {\r\n\tdate: string\r\n}\r\n\r\nconst PostCard = ({ date }: Props) => {\r\n\tconst classes = useStyles();\r\n\tconst [isExpanded, setIsExpanded] = useState(false);\r\n\tconst [locked, setLocked] = useLockedBody(false);\r\n\tconst api = usePostByDate(date);\r\n\r\n\tconst toggleFullscreen = (event: React.MouseEvent<HTMLElement>) => {\r\n\t\tevent.preventDefault();\r\n\t\tsetIsExpanded(prev => !prev);\r\n\t\tsetLocked(!locked);\r\n\t}\r\n\r\n\tif (!api.data) return null;\r\n\tconst post = api.data;\r\n\r\n\treturn (\r\n\t\t<Card className={classes.postCard}>\r\n\t\t\t<ExpandableImage\r\n\t\t\t\turl={post.url}\r\n\t\t\t\ttitle={post.title}\r\n\t\t\t\tmediaType={post.media_type}\r\n\t\t\t\ttoggleFullscreen={toggleFullscreen}\r\n\t\t\t\tisExpanded={isExpanded}\r\n\t\t\t\tdescription={post.explanation}\r\n\t\t\t\tcopyright={post?.copyright}\r\n\t\t\t\tdate={post.date}\r\n\t\t\t/>\r\n\t\t\t<CardContent>\r\n\t\t\t\t<div className={classes.contentTopContainer}>\r\n\t\t\t\t\t<Typography variant='h5' component='h5'>\r\n\t\t\t\t\t\t{post.title}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<PostActions date={date} toggleFullscreen={toggleFullscreen} mediaType={post.media_type} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<Typography variant='subtitle1' component='h6'>{post.date}</Typography>\r\n\t\t\t\t<ToggleableText text={post.explanation} />\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t)\r\n};\r\n\r\nexport default PostCard;"],"names":["initialLocked","useState","locked","setLocked","useLayoutEffect","originalOverflow","document","body","style","overflow","originalPaddingRight","paddingRight","root","getElementById","scrollBarWidth","offsetWidth","scrollWidth","useEffect","date","toggleFullscreen","mediaType","mutate","useVote","voteCount","useGetPostVote","data","count","votes","display","alignItems","margin","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","color","onChange","inputProps","checked","userLiked","padding","IconButton","onClick","Fullscreen","eventName","handler","element","savedHandler","useRef","targetElement","current","window","addEventListener","eventListener","event","removeEventListener","ref","setRef","width","height","size","setSize","handleSize","useCallback","offsetHeight","useEventListener","useStyles","makeStyles","theme","toggleButton","border","backgroundColor","cursor","palette","mode","fontSize","success","light","text","hidden","setHidden","useElementSize","textRef","classes","slideInStyles","useSpring","config","from","opacity","to","animated","Typography","variant","component","textIndent","textAlign","preventDefault","prev","className","ArrowDropDown","transform","transition","imageContainer","position","paddingBottom","marginBottom","image","top","left","imageModal","maxHeight","maxWidth","overlay","flexDirection","right","bottom","zIndex","paddingTop","overlayButton","url","title","isExpanded","description","copyright","CardMedia","alt","src","allowFullScreen","loading","role","alignSelf","Close","postCard","breakpoints","down","contentTopContainer","justifyContent","setIsExpanded","useLockedBody","api","usePostByDate","post","Card","media_type","explanation","CardContent"],"sourceRoot":""}